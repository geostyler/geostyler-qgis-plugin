# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoStyler
                                 A QGIS plugin
 GeoStyler exporter
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-18
        git sha              : $Format:%H$
        copyright            : (C) 2024 by GeoStyler Team
        email                : sethg@geographika.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMenu, QDialogButtonBox, QDialog, QComboBox
from qgis.core import QgsProject, QgsLayerTree, QgsMapLayer, QgsMapLayerType, Qgis
from qgis.gui import QgsFileWidget
from qgis.PyQt.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .geostyler_dialog import GeoStylerDialog
from .client_wrapper import run_geostyler
import os.path
import tempfile


class GeoStyler:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "GeoStyler_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.plugin_menu_provider = None

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&GeoStyler")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.custom_action = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("GeoStyler", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def custom_style_action_triggered(self):
        # Define what happens when the custom style action is triggered

        # Get the active layer when the custom action is triggered
        active_layer = self.iface.activeLayer()

        if active_layer:
            layer_name = active_layer.name()
        else:
            QMessageBox.warning(self.iface.mainWindow(), "No Active Layer", "No active layer found.")

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeoStylerDialog()

        file_widget = self.dlg.findChild(QgsFileWidget, "mQgsFileWidget")
        file_widget.fileChanged.connect(self.on_file_changed)

        # check if the button should be disabled initially
        self.on_file_changed(file_widget.filePath())

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result == QDialog.Accepted:

            # Get the file path from mQgsFileWidget
            output_file_path = file_widget.filePath()

            output_format_combo = self.dlg.findChild(QComboBox, "outputFormat")
            output_format = output_format_combo.currentText()
            # Create a named temporary file
            with tempfile.TemporaryDirectory() as tmp:
                temp_file_name = os.path.join(tmp, 'geostyler-export.qml')

                # https://api.qgis.org/api/classQgsMapLayer.html#ae44dba60c5814bec4a8180753d7faec4
                active_layer.saveNamedStyle(temp_file_name, QgsMapLayer.StyleCategory.Symbology | QgsMapLayer.StyleCategory.Labeling)
                # active_layer.saveNamedStyle(temp_file_name, QgsMapLayer.StyleCategory.Symbology)
                # remove any existing file so we know if it was recreated
                if os.path.exists(output_file_path):
                    os.remove(output_file_path)
                result = run_geostyler(temp_file_name, output_file_path, output_format)
                # for checking the output
                # import shutil
                # shutil.copyfile(temp_file_name, r"D:\Temp\test.qml")
            # Check the return code
            if result.returncode == 0 or os.path.exists(output_file_path) is False:
                # we can get a 0 return code but still have errors, so check the output file was created
                message = f"Style exported to {output_file_path} for layer {layer_name}"
                self.iface.messageBar().pushMessage(message, level=Qgis.Info)
            else:
                message = f"Failed to export to {output_file_path} with code {result.returncode}. Errors {result.stderr}"
                self.iface.messageBar().pushMessage(message, level=Qgis.Warning)


    def on_file_changed(self, file_path):
        # Find the button box
        button_box = self.dlg.findChild(QDialogButtonBox, "button_box")
        if button_box:
            # Enable the OK button if a file is selected, disable otherwise
            ok_button = button_box.button(QDialogButtonBox.Ok)
            if file_path:
                ok_button.setEnabled(True)
            else:
                ok_button.setEnabled(False)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/geostyler/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Export Style"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        self.custom_action = QAction(QIcon(icon_path), "Export Style", self.iface.mainWindow())
        self.custom_action.triggered.connect(self.custom_style_action_triggered)

        # an empty menu name - "" adds the action to the root layer context menu
        self.iface.addCustomActionForLayerType(self.custom_action, "", QgsMapLayerType.VectorLayer, True)

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&GeoStyler"), action)
            self.iface.removeToolBarIcon(action)

        self.iface.removeCustomActionForLayerType(self.custom_action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeoStylerDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
